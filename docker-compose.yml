services:
  # USER SERVICE
  user_service_db:
    image: postgres:13
    container_name: user_service_db
    ports:
      - '${USER_DB_PORT}:5432'
    environment:
      POSTGRES_DB: ${USER_DB_DATABASE}
      POSTGRES_USER: ${USER_DB_USERNAME}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    volumes:
      - user_service_data:/var/lib/postgresql/data
    networks:
      - rexpense_network

  user_service:
    platform: linux/amd64
    build:
      context: ./user_service
      dockerfile: Dockerfile
    container_name: user_service
    ports:
      - '${USER_APP_PORT}:${USER_APP_PORT}'
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_ACCESS_EXPIRE_IN=${JWT_ACCESS_EXPIRE_IN}
      - JWT_REFRESH_SECRET=${USER_JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRE_IN=${USER_JWT_REFRESH_EXPIRE_IN}
      - DB_HOST=user_service_db
      - DB_PORT=5432
      - DB_DATABASE=${USER_DB_DATABASE}
      - DB_USERNAME=${USER_DB_USERNAME}
      - DB_PASSWORD=${USER_DB_PASSWORD}
      - DB_SYNCHRONIZE=${USER_DB_SYNCHRONIZE}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - user_service_db
      - kafka-init
    volumes:
      - ./user_service:/app
      - /app/node_modules
    networks:
      - rexpense_network

  # TRANSACTION SERVICE
  transaction_service_db:
    image: postgres:13
    container_name: transaction_service_db
    ports:
      - '${TRANSACTION_DB_PORT}:5432'
    environment:
      POSTGRES_DB: ${TRANSACTION_DB_DATABASE}
      POSTGRES_USER: ${TRANSACTION_DB_USERNAME}
      POSTGRES_PASSWORD: ${TRANSACTION_DB_PASSWORD}
    volumes:
      - transaction_service_data:/var/lib/postgresql/data
    networks:
      - rexpense_network

  transaction_service:
    build:
      context: ./transaction_service
      dockerfile: Dockerfile
    container_name: transaction_service
    ports:
      - '${TRANSACTION_APP_PORT}:8000'
    environment:
      - SECRET_KEY=${TRANSACTION_SECRET_KEY}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - DB_HOST=transaction_service_db
      - DB_PORT=5432
      - DB_DATABASE=${TRANSACTION_DB_DATABASE}
      - DB_USERNAME=${TRANSACTION_DB_USERNAME}
      - DB_PASSWORD=${TRANSACTION_DB_PASSWORD}
      - DB_SYNCHRONIZE=${TRANSACTION_DB_SYNCHRONIZE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - transaction_service_db
      - kafka-init
    volumes:
      - ./transaction_service:/app
    networks:
      - rexpense_network

  # BUDGET SERVICE
  budget_service_db:
    image: postgres:13
    container_name: budget_service_db
    ports:
      - '${BUDGET_DB_PORT}:5432'
    environment:
      POSTGRES_DB: ${BUDGET_DB_DATABASE}
      POSTGRES_USER: ${BUDGET_DB_USERNAME}
      POSTGRES_PASSWORD: ${BUDGET_DB_PASSWORD}
    volumes:
      - budget_service_data:/var/lib/postgresql/data
    networks:
      - rexpense_network

  budget_service:
    build:
      context: ./budget_service
      dockerfile: Dockerfile
    container_name: budget_service
    ports:
      - '${BUDGET_APP_PORT}:8000'
    environment:
      - SECRET_KEY=${BUDGET_SECRET_KEY}
      - DB_HOST=budget_service_db
      - DB_PORT=5432
      - DB_DATABASE=${BUDGET_DB_DATABASE}
      - DB_USERNAME=${BUDGET_DB_USERNAME}
      - DB_PASSWORD=${BUDGET_DB_PASSWORD}
      - DB_SYNCHRONIZE=${BUDGET_DB_SYNCHRONIZE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - budget_service_db
      - kafka
      - kafka-init
    volumes:
      - ./budget_service:/app
    networks:
      - rexpense_network

  # KAFKA & ZOOKEEPER
  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/data
      - zookeeper_log:/datalog
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - rexpense_network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - rexpense_network

  kafka-init:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-init
    depends_on:
      - kafka
    volumes:
      - ./kafka:/scripts
    command: >
      bash -c "
        chmod +x /scripts/init-topics.sh &&
        /scripts/init-topics.sh"
    networks:
      - rexpense_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_AUTHENTICATION_METHOD=none
    depends_on:
      - kafka
    networks:
      - rexpense_network

networks:
  rexpense_network:
    driver: bridge

volumes:
  user_service_data:
  transaction_service_data:
  zookeeper_data:
  zookeeper_log:
  budget_service_data:
